# 使用索引CSV的分類任務示例配置 - DrTai_Evaluation版本
# 此配置文件展示了如何使用索引CSV進行音頻分類任務
# 主要特點：使用DrTai_Evaluation作為分類目標，按標籤均勻拆分數據
# python scripts/run_experiments.py --config config/example_classification_drlee_balanced.yaml
# 全局配置 - 設置實驗環境和輸出
global:
  experiment_name: 'indexed_classification_drlee_balanced'  # 實驗名稱，用於日誌和輸出文件命名
  seed: 42                                   # 隨機種子，確保結果可重現
  debug: false                               # 是否啟用調試模式
  device: 'auto'                             # 訓練設備，'auto'會自動選擇GPU或CPU
  output_dir: 'results'                      # 輸出目錄，存放模型、日誌和結果
  logging_level: 'INFO'                      # 日誌級別，可選'DEBUG', 'INFO', 'WARNING', 'ERROR'

# 數據配置 - 定義數據加載和預處理方式
data:
  type: 'audio'                              # 數據類型，可選'audio', 'spectrogram', 'feature'
  
  # 新增索引CSV支持
  use_index: true  # 是否使用索引CSV加載數據
  index_path: 'data/metadata/selection_groups/biscuit_20250516_230749.csv'  # 索引CSV文件路徑
  label_field: 'DrLee_Evaluation'  # 標籤欄位名稱: 'score'(回歸任務), 'DrLee_Evaluation'(3類), 'DrTai_Evaluation'(4類), 'selection'(9類+)
  filter_criteria:  # 篩選條件
    status: null  # 數據處理狀態，'raw', 'processed', 'failed'，或null表示不篩選
    selection: null  # 錄音時的動作類型，如'乾吞嚥1口'，或null表示不篩選
  
  # 音頻預處理 - 設置音頻處理參數
  preprocessing:
    audio:
      sample_rate: 16000                     # 採樣率（Hz）
      duration: 5.0                          # 音頻長度（秒）
      normalize: true                        # 是否標準化音頻振幅
  
  # 特徵提取 - 從音頻生成特徵
  preprocessing:
    features:
      method: 'mel_spectrogram'              # 特徵提取方法，使用梅爾頻譜圖
      n_mels: 128                            # 梅爾濾波器數量
      n_fft: 1024                            # FFT窗口大小
      hop_length: 512                        # 幀移步長
      log_mel: true                          # 是否對梅爾頻譜圖取對數
  
  # 數據集拆分 - 定義訓練、驗證和測試集的劃分方式
  splits:
    train_ratio: 0.5                         # 訓練集比例
    val_ratio: 0.3                          # 驗證集比例
    test_ratio: 0.2                         # 測試集比例
    split_seed: 42                           # 拆分隨機種子
    split_by_patient: false                  # 禁用按患者ID拆分
    split_by_label: true                     # 啟用按標籤均勻拆分
  
  # 數據轉換 - 數據增強和預處理
  transforms:
    train:                                   # 訓練集數據增強
      time_shift:                            # 時間偏移增強
        enabled: true                        # 啟用時間偏移
        max_shift_sec: 0.5                   # 最大偏移時間（秒）
      volume_scale:                          # 音量縮放增強
        enabled: true                        # 啟用音量縮放
        min_scale: 0.8                       # 最小縮放因子
        max_scale: 1.2                       # 最大縮放因子
    val: {}                                  # 驗證集不使用數據增強
    test: {}                                 # 測試集不使用數據增強
  
  # 數據加載器配置 - 設置批處理和並行加載
  dataloader:
    batch_size: 32                           # 批大小
    num_workers: 4                           # 數據加載線程數
    pin_memory: true                         # 是否將數據固定在內存中（GPU訓練時有用）
    drop_last: false                         # 是否丟棄最後一個不完整批次

# 模型配置 - 定義模型架構和參數
model:
  type: 'swin_transformer' # 更新模型類型
  parameters:
    model_name: 'swin_tiny_patch4_window7_224' # Swin Transformer 的一個變體
    pretrained: true                         # 是否使用預訓練權重
    num_classes: 3                           # 輸出類別數量（會根據選擇的標籤欄位自動設置）
    in_channels: 3                           # 輸入通道數（假設頻譜圖被處理成3通道）
    input_size: [224, 224]                   # Swin Transformer 的標準輸入尺寸
    use_visual_prompting: false              # 根據需求設定是否使用視覺提示
    # prompt_size: [16, 16]                  # 只有在 use_visual_prompting 為 true 時需要
    # prompt_dropout: 0.1                    # 只有在 use_visual_prompting 為 true 時需要
    # prompt_init_range: 0.1                 # 只有在 use_visual_prompting 為 true 時需要
    dropout_rate: 0.1                        # Dropout 率
    is_classification: true                  # 確認這是分類任務

# 訓練配置 - 定義訓練過程和優化器
training:
  epochs: 5
  save_every: 1
  early_stopping:                            # 早停機制，防止過擬合
    enabled: false                            # 啟用早停
    patience: 10                             # 容忍輪數，驗證指標不再改善時等待的輪數
    min_delta: 0.001                         # 最小改善閾值
  
  optimizer:                                 # 優化器配置
    type: 'Adam'                             # 使用Adam優化器
    parameters:
      lr: 0.001                              # 學習率
      weight_decay: 0.0001                   # 權重衰減（L2正則化）
  
  lr_scheduler:                              # 學習率調度器
    type: 'ReduceLROnPlateau'                # 根據驗證指標調整學習率
    parameters:
      mode: 'min'                            # 監控模式，'min'表示指標越小越好
      factor: 0.5                            # 學習率衰減因子
      patience: 5                            # 容忍輪數
      min_lr: 1.0e-6                         # 最小學習率
  
  loss:                                      # 損失函數配置
    type: 'WeightedCrossEntropyLoss'         # 使用加權交叉熵損失（適用於不平衡分類任務）
    parameters:
      reduction: 'mean'                      # 損失縮減方式
      normalize_weights: true                # 是否標準化權重
  
  gradient_clipping:                         # 梯度裁剪，防止梯度爆炸
    enabled: true                            # 啟用梯度裁剪
    max_norm: 1.0                            # 最大梯度範數

# 評估配置 - 定義模型評估方式
evaluation:
  metrics:                                   # 評估指標
    - 'accuracy'                             # 準確率
    - 'precision'                            # 精確率
    - 'recall'                               # 召回率
    - 'f1'                                   # F1分數
  
  validation:                                # 驗證配置
    frequency: 1                             # 每訓練多少輪進行一次驗證
    best_model_metric: 'accuracy'            # 用於保存最佳模型的指標
    best_model_mode: 'max'                   # 指標模式，'max'表示越大越好
  
  inference:                                 # 推理配置
    batch_size: 32                           # 推理批大小
    save_predictions: true                   # 是否保存預測結果

# 可視化配置 - 定義訓練過程和結果的可視化
visualization:
  enabled: true                              # 是否啟用可視化
  
  tensorboard:                               # TensorBoard可視化
    enabled: true                            # 啟用TensorBoard
    log_dir: 'tensorboard_logs'              # TensorBoard日誌目錄
  
  confusion_matrix:                          # 混淆矩陣可視化
    enabled: true                            # 啟用混淆矩陣
    normalize: 'true'                        # 是否標準化混淆矩陣
  
  tsne:                                      # t-SNE降維可視化
    enabled: true                            # 啟用t-SNE
    perplexity: 30                           # t-SNE困惑度參數
    n_components: 2                          # 降維後的維度 

# Hook配置 - 啟用各種模型分析和數據收集鉤子
hooks:
  # 模型分析鉤子：收集層激活值和梯度，並捕獲特徵向量
  model_analytics:
    enabled: true
    # Swin Transformer (swin_tiny_patch4_window7_224) 的層次結構：
    # self.backbone.features 是一個 nn.Sequential:
    #   features.0: PatchEmbed
    #   features.1: Stage 1
    #   features.2: Stage 2
    #   features.3: Stage 3
    #   features.4: Stage 4
    #   features.5: Final LayerNorm
    #   features.6: AdaptiveAvgPool2d
    #   features.7: Flatten (此為輸入到 self.head 的特徵向量)
    # self.head 是一個 nn.Sequential(Dropout, Linear)
    #   head.0: Dropout
    #   head.1: Linear
    # self.skip_connection 是一個 nn.Sequential(Linear, ReLU, Linear)
    #   skip_connection.0: Linear1
    #   skip_connection.1: ReLU
    #   skip_connection.2: Linear2
    monitored_layers: ['backbone.features.0', 'backbone.features.2', 'backbone.features.4', 'backbone.features.5', 'head.1', 'skip_connection.2'] # 監控主要層
    monitored_params: ['head.1.weight', 'head.1.bias', 'skip_connection.0.weight', 'skip_connection.0.bias', 'skip_connection.2.weight', 'skip_connection.2.bias'] # 監控分類頭和跳接層的權重和偏置
    feature_vector_layers: [  # 特徵向量捕獲層配置 (取其輸出)
      'backbone.features.4',    # 最後一個卷積 Stage 的輸出 (仍有空間維度)
      'backbone.features.7',    # Backbone 最終展平的特徵向量
      'head.0'                  # 最終分類層之前 Dropout 層的輸出
    ]
    save_frequency: 5  # 保存頻率（每 N 個 epoch 保存一次）
    save_validation_predictions: true  # 是否在每個 epoch 保存驗證集預測結果
    
    # 新增：控制特徵分析計算的配置
    compute_similarity: true  # 是否計算並保存餘弦相似度
    compute_tsne: true        # 是否計算並保存t-SNE嵌入
    tsne_perplexity: 30       # t-SNE計算的困惑度參數 (僅在 compute_tsne 為 true 時有效)
  
  # 評估結果捕獲鉤子：收集測試集的真實標籤和模型預測（用於混淆矩陣）
  evaluation_capture:
    enabled: true
    datasets: ['test', 'val']  # 要捕獲結果的數據集
    save_probabilities: true  # 是否保存類別概率（用於 ROC 曲線）
  
  # 激活值捕獲鉤子：此部分功能已整合到 model_analytics 中
  # 如果您仍想使用獨立的 ActivationCaptureHook (例如用於調試或特定目的)，可以取消註釋並配置
  # activation_capture:
  #   enabled: false # 默認禁用，因為已整合
  #   target_layers: [
  #     'backbone.4',
  #     'backbone.7',
  #     'head.0'
  #   ]
  #   datasets: ['train', 'test', 'val']
  #   compute_similarity: true
  #   compute_tsne: true
  #   include_sample_ids: true
  #   generate_random_labels: false
  #   debug_mode: false # 如果獨立使用，可以啟用調試 